appconfig
class AppConfig:
    """Configuration settings for the Device Monitor application"""

    # Application settings
    APP_VERSION = "1.0.0"
    
    # Display scaling
    DISPLAY_SCALING = 0.9
    WINDOW_SCALING = 0.9

    # Window settings
    WINDOW_TITLE = "Device Monitor"
    WINDOW_WIDTH = 1700
    WINDOW_HEIGHT = 900
    WINDOW_MAXIMIZED = True
    WINDOW_PADDING = 24

    # Info Panel dimensions
    INFO_PANEL_WIDTH = 1636
    INFO_PANEL_HEIGHT = 116

    # Theme colors
    APPEARANCE_MODE = "dark"
    BACKGROUND_COLOR = "#1F1F1F"
    PANEL_COLOR = "#2B2D30"
    BORDER_COLOR = "#373737"
    BUTTON_COLOR = "#0078D4"
    BUTTON_HOVER_COLOR = "#0063AD"  
    DISCONNECT_COLOR = "darkred"
    DISCONNECT_HOVER_COLOR = "#8B0000"
    TEXT_COLOR = "white"
    LABEL_COLOR = "#DEDEDE"
    TEXTBOX_COLOR = "#373737"
    FRAME_BG = "#5D5D5D"

    # Typography
    FONT_FAMILY = "Inter"
    FONT_SIZE_HEADER = 16
    FONT_SIZE_NORMAL = 12
    
    FONT_WEIGHT_NORMAL = "normal"
    FONT_WEIGHT_BOLD = "bold"
    
    HEADER_FONT = (FONT_FAMILY + " Bold", FONT_SIZE_HEADER)
    LABEL_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    VALUE_FONT = (FONT_FAMILY + " Bold", FONT_SIZE_NORMAL)
    TEXT_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    BUTTON_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    
    # Component styling
    BORDER_WIDTH = 1
    CORNER_RADIUS = 8
    BUTTON_CORNER_RADIUS = 8  
    
    # Button dimensions
    BUTTON_WIDTH = 112
    BUTTON_HEIGHT = 38

    # Footer settings
    FOOTER_HEIGHT = 50
    FOOTER_COLOR = "#181818"
    FOOTER_PADDING = 20
devicemonitor
class AppConfig:
    """Configuration settings for the Device Monitor application"""

    # Application settings
    APP_VERSION = "1.0.0"
    
    # Display scaling
    DISPLAY_SCALING = 0.9
    WINDOW_SCALING = 0.9

    # Window settings
    WINDOW_TITLE = "Device Monitor"
    WINDOW_WIDTH = 1700
    WINDOW_HEIGHT = 900
    WINDOW_MAXIMIZED = True
    WINDOW_PADDING = 24

    # Info Panel dimensions
    INFO_PANEL_WIDTH = 1636
    INFO_PANEL_HEIGHT = 116

    # Theme colors
    APPEARANCE_MODE = "dark"
    BACKGROUND_COLOR = "#1F1F1F"
    PANEL_COLOR = "#2B2D30"
    BORDER_COLOR = "#373737"
    BUTTON_COLOR = "#0078D4"
    BUTTON_HOVER_COLOR = "#0063AD"  
    DISCONNECT_COLOR = "darkred"
    DISCONNECT_HOVER_COLOR = "#8B0000"
    TEXT_COLOR = "white"
    LABEL_COLOR = "#DEDEDE"
    TEXTBOX_COLOR = "#373737"
    FRAME_BG = "#5D5D5D"

    # Typography
    FONT_FAMILY = "Inter"
    FONT_SIZE_HEADER = 16
    FONT_SIZE_NORMAL = 12
    
    FONT_WEIGHT_NORMAL = "normal"
    FONT_WEIGHT_BOLD = "bold"
    
    HEADER_FONT = (FONT_FAMILY + " Bold", FONT_SIZE_HEADER)
    LABEL_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    VALUE_FONT = (FONT_FAMILY + " Bold", FONT_SIZE_NORMAL)
    TEXT_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    BUTTON_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    
    # Component styling
    BORDER_WIDTH = 1
    CORNER_RADIUS = 8
    BUTTON_CORNER_RADIUS = 8  
    
    # Button dimensions
    BUTTON_WIDTH = 112
    BUTTON_HEIGHT = 38

    # Footer settings
    FOOTER_HEIGHT = 50
    FOOTER_COLOR = "#181818"
    FOOTER_PADDING = 20
main
import customtkinter as ctk
from src.config.app_config import AppConfig
from src.views.device_monitor_view import DeviceMonitorView
from src.views.gamepad_view import GamepadView
from src.views.overall_status_view import OverallStatusView
from src.views.imu1_view import IMU1View
from src.views.imu2_view import IMU2View
from src.views.sensor_view import SensorView
from src.views.footer_view import FooterComponent


class App:
    """Main application class for the Device Monitor"""

    def __init__(self):
        # Configure scaling for high DPI displays
        ctk.set_widget_scaling(AppConfig.DISPLAY_SCALING)
        ctk.set_window_scaling(AppConfig.WINDOW_SCALING)

        self.window = ctk.CTk()
        self.device_monitor = None

        self._setup_window()
        self._setup_theme()
        self._setup_views()

    def _setup_window(self):
        """Configure main window properties"""
        self.window.title(AppConfig.WINDOW_TITLE)
        self.window.geometry(
            f"{AppConfig.WINDOW_WIDTH}x{AppConfig.WINDOW_HEIGHT}")
        if AppConfig.WINDOW_MAXIMIZED:
            self.window.state("zoomed")

    def _setup_theme(self):
        """Configure global theme settings"""
        ctk.set_appearance_mode(AppConfig.APPEARANCE_MODE)
        self.window.configure(fg_color=AppConfig.BACKGROUND_COLOR)

    def _setup_views(self):
        """Initialize and setup application views"""
        # Create main device monitor view
        self.device_monitor = DeviceMonitorView(self.window)

        content_frame = ctk.CTkFrame(
            self.device_monitor, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, pady=(20, 0))

        # Configure grid columns with weights instead of 12-column system
        content_frame.grid_columnconfigure(0, weight=1)  # Left section
        content_frame.grid_columnconfigure(1, weight=2)  # Right section

        # Left section - Create container
        left_container = ctk.CTkFrame(
            content_frame,
            fg_color="transparent",
        )
        left_container.grid(row=0, column=0, rowspan=3,
                            sticky="nsew",)
        left_container.grid_columnconfigure(0, weight=1)
        left_container.grid_rowconfigure(0, weight=1)

        # Gamepad view inside left container
        self.gamepad_view = GamepadView(left_container)
        self.gamepad_view.grid(
            row=0, column=0, sticky="nsew")

        # Right section (weight=2)

        # Create right container
        right_container = ctk.CTkFrame(
            content_frame,
            fg_color="transparent",
        )
        right_container.grid(row=0, column=1, rowspan=3,
                             sticky="nsew",padx=(10, 0))
        right_container.grid_columnconfigure(0, weight=1)
        right_container.grid_rowconfigure(1, weight=0)
        right_container.grid_rowconfigure(2, weight=1)
        right_container.grid_rowconfigure(3, weight=0)

        # Overall Status
        self.overall_status_view = OverallStatusView(right_container)
        self.overall_status_view.grid(
            row=0, column=0, sticky="nsew", padx=(10,0), pady=(0,10))

        # Create frame for IMU panels
        imu_frame = ctk.CTkFrame(right_container, fg_color="transparent")
        imu_frame.grid(row=1, column=0, sticky="nsew", padx=(10,0), pady=10)
        imu_frame.grid_columnconfigure(0, weight=1)
        imu_frame.grid_columnconfigure(1, weight=1)
        
        imu_frame.grid_rowconfigure(0, weight=1)
        imu_frame.grid_rowconfigure(1, weight=1)

        # IMU panels (equal width)
        self.imu1_view = IMU1View(imu_frame)
        self.imu1_view.grid(row=0, column=0, 
                            sticky="nsew", padx=(0, 10))

        self.imu2_view = IMU2View(imu_frame)
        self.imu2_view.grid(row=0, column=1, 
                            sticky="nsew", padx=(10, 0))

        # Sensor panel
        self.sensor_view = SensorView(right_container)
        self.sensor_view.grid(row=2, column=0, sticky="nsew", padx=(10,0), pady=10)

        # Create footer
        self.footer = FooterComponent(self.window)
        self.footer.pack(side="bottom", fill="x" )

    def run(self):
        """Start the application main loop"""
        self.window.mainloop()


if __name__ == "__main__":
    app = App()
    app.run()
footer
import customtkinter as ctk
from src.config.app_config import AppConfig

class FooterComponent(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(
            parent,
            height=AppConfig.FOOTER_HEIGHT,
            fg_color=AppConfig.FOOTER_COLOR,
            corner_radius=0
        )
        self.pack_propagate(False)
        self._create_footer()

    def _create_footer(self):
        """Create the footer content with version label"""
        version_label = ctk.CTkLabel(
            self,
            text=f"Version {AppConfig.APP_VERSION}",
            font=AppConfig.LABEL_FONT,
            text_color=AppConfig.TEXT_COLOR
        )
        version_label.pack(side="left", padx=AppConfig.FOOTER_PADDING, pady=0)

gamepad
import customtkinter as ctk
from src.config.app_config import AppConfig
from src.views.graph_view import GraphView
from src.views.coordinate_entry import CoordinateEntry
from src.views.button_component import ButtonComponent


class GamepadView(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(
            parent,
            fg_color=AppConfig.PANEL_COLOR,
            border_color=AppConfig.BORDER_COLOR,
            border_width=AppConfig.BORDER_WIDTH,
            corner_radius=AppConfig.CORNER_RADIUS,
        )
        self.grid_columnconfigure(0, weight=1)
        # self.grid_rowconfigure(1, weight=2)

        # Header wrapped in orange frame
        header_frame = ctk.CTkFrame(
            self,
            fg_color="transparent",
        )
        header_frame.grid(row=0, column=0, sticky="nw", padx=12)

        header_label = ctk.CTkLabel(
            header_frame,
            text="GAMEPAD",
            font=AppConfig.HEADER_FONT,
            text_color=AppConfig.TEXT_COLOR,
            fg_color="transparent"
        )
        header_label.pack(padx=5, pady=5)

        # Joystick label wrapped in yellow frame
        joystick_frame = ctk.CTkFrame(
            self,
            fg_color="transparent",
        )
        joystick_frame.grid(row=1, column=0, sticky="nw", padx=30)

        joystick_label = ctk.CTkLabel(
            joystick_frame,
            text="JOYSTICK",
            font=AppConfig.HEADER_FONT,
            text_color=AppConfig.TEXT_COLOR,
            fg_color="transparent"
        )
        joystick_label.pack(padx=5, pady=5)

        self.graph_view = GraphView(self)
        self.graph_view.grid(row=2, column=0, sticky="nesw", padx=30, pady=12)

        # Create xy container
        self.create_xy_container()
        self.update_xy_values(8000, 6000)

        # Separator
        separator = ctk.CTkFrame(
            self,
            height=2,
            width=0,
            fg_color=AppConfig.BORDER_COLOR
        )
        separator.grid(row=4, column=0, sticky="ew", padx=30, pady=(5, 20))

        # Button label
        button_label = ctk.CTkLabel(
            self,
            text="BUTTONS",
            font=AppConfig.HEADER_FONT,
            text_color=AppConfig.TEXT_COLOR,
            fg_color="transparent"
        )
        button_label.grid(row=5, column=0, sticky="nw", padx=30)

        # Button container
        button_container = ctk.CTkFrame(
            self,
            fg_color="transparent",
            width=0,
            height=28,
        )
        button_container.grid(row=6, column=0, sticky="ew", padx=30, pady=12)
        button_container.grid_columnconfigure((0, 2, 4, 6), weight=0)
        button_container.grid_columnconfigure((1, 3, 5, 7), weight=1)

        # Replace the button creation code with this:
        button_states = [True, False, True, True]  # Example states: TFTF
        self.button_frames = []  # Store frame references for later state updates

        for i, (name, state) in enumerate(zip(['B1', 'B2', 'B3', 'B4'], button_states)):
            frame = self.create_button_frame(
                button_container, 
                name, 
                i * 2,  # Multiply by 2 because we use 2 columns per button
                state
            )
            self.button_frames.append(frame)

        # The last button frame needs different padding
        self.button_frames[-1].grid(padx=0)  # Remove right padding for last button

        self.button_config = ButtonComponent(button_container, "Configure")
        self.button_config.grid(row=1, column=0, columnspan=8,
                              sticky="es", padx=(0, 5), pady=20)

    def create_button_frame(self, container, button_name, column_start, is_active=False):
        label = ctk.CTkLabel(
            container,
            text=button_name,
            font=AppConfig.LABEL_FONT,
            text_color=AppConfig.TEXT_COLOR,
            fg_color="transparent"
        )
        label.grid(row=0, column=column_start, sticky="nw", padx=(0, 10))
        
        frame = ctk.CTkFrame(
            container,
            fg_color=AppConfig.BUTTON_COLOR if is_active else AppConfig.FRAME_BG,
            width=0,
            height=28,
            border_color=AppConfig.BORDER_COLOR,
            border_width=AppConfig.BORDER_WIDTH,
            corner_radius=AppConfig.CORNER_RADIUS,
        )
        frame.grid(row=0, column=column_start + 1, sticky="ew", padx=(0, 5))
        return frame

    def update_button_state(self, button_index, is_active):
        if 0 <= button_index < len(self.button_frames):
            self.button_frames[button_index].configure(
                fg_color=AppConfig.BUTTON_COLOR if is_active else AppConfig.FRAME_BG
            )

    def create_xy_container(self):
        """Create the XY coordinate display container"""
        xy_frame = ctk.CTkFrame(
            self,
            fg_color=AppConfig.PANEL_COLOR,
            height=28,
            corner_radius=AppConfig.CORNER_RADIUS,
        )
        xy_frame.grid(row=3, column=0, sticky="w", padx=30, pady=12)

        # Create X and Y coordinate entries
        self.x_entry = CoordinateEntry(xy_frame, "X")
        self.y_entry = CoordinateEntry(xy_frame, "Y")
        
        self.x_entry.grid(row=0, column=0, padx=5, pady=5)
        self.y_entry.grid(row=0, column=1, padx=5, pady=5)

    def update_xy_values(self, x: float, y: float):
        """Update the X and Y coordinate values and graph position
        
        Args:
            x: X coordinate value
            y: Y coordinate value
        """
        self.x_entry.set_value(x)
        self.y_entry.set_value(y)
        
        # Update graph point position
        self.graph_view.update_xy(x, y)
graph
import customtkinter as ctk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

class GraphView(ctk.CTkFrame):
    def __init__(self, parent, figsize=(7, 5), dpi=70, bg_color='#3A3A3A'):
        super().__init__(parent)

        # Create and embed matplotlib plot
        self.fig = Figure(figsize=figsize, dpi=dpi)
        self.ax = self.fig.add_subplot(111)
        self.fig.patch.set_facecolor(bg_color)  # Set figure background
        self.ax.set_facecolor(bg_color)  # Set plot background
        
        # Configure axis limits and appearance
        self.ax.set_xlim(0, 30000)
        self.ax.set_ylim(0, 30000)
        self.ax.tick_params(colors='white')  # Make ticks white
        self.ax.grid(True, color='gray', alpha=0.3)  # Add subtle grid
        
        # Create scatter plot for single point (initialized at 0,0)
        self.point = self.ax.scatter([0], [0], color='red', s=100)
        
        # Create canvas and embed in frame
        self.canvas = FigureCanvasTkAgg(self.fig, master=self)
        self.canvas.draw()
        self.canvas.get_tk_widget().pack(fill="both", expand=True)

    def update_xy(self, x: float, y: float):
        """Update the point position with new x,y coordinates"""
        self.point.set_offsets([[x, y]])
        self.canvas.draw()
imu1,imu2
from src.views.base_imu_view import BaseIMUView

class IMU1View(BaseIMUView):
    def __init__(self, parent):
        super().__init__(parent, "IMU1")
from src.views.base_imu_view import BaseIMUView

class IMU2View(BaseIMUView):
    def __init__(self, parent):
        super().__init__(parent, "IMU2")
overall
import customtkinter as ctk
from src.config.app_config import AppConfig

class OverallStatusView(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(
            parent,
            fg_color=AppConfig.PANEL_COLOR,
            border_color=AppConfig.BORDER_COLOR,
            border_width=AppConfig.BORDER_WIDTH,
            corner_radius=AppConfig.CORNER_RADIUS
        )
        # Configure base grid
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)

        # Create UI Components
        self.create_header()
        self.create_status_container()
        self.update_status(False, True, False)

    def create_header(self):
        """Create the header section"""
        header_label = ctk.CTkLabel(
            self,
            text="OVERALL STATUS",
            font=AppConfig.HEADER_FONT,
            text_color=AppConfig.TEXT_COLOR
        )
        header_label.grid(row=0, column=0, sticky="nw", padx=12, pady=(12, 0))

    def create_status_container(self):
        """Create the status indicator container"""
        # Create container frame
        status_container = ctk.CTkFrame(
            self,
            fg_color="transparent",
        )
        status_container.grid(row=1, column=0, sticky="nsew", padx=12, pady=(0, 12))
        
        # Configure grid columns
        status_container.grid_columnconfigure((1, 3, 5), weight=1)  # Status columns
        status_container.grid_columnconfigure((0, 2, 4), weight=0)  # Label columns

        # Store status labels for updates
        self.status_labels = {}

        # Create status indicators
        status_configs = [
            ("Fuelgause:", "fuelgause", 0),
            ("IMU1:", "imu1", 2),
            ("IMU2:", "imu2", 4)
        ]

        for label_text, key, start_col in status_configs:
            self.create_status_pair(
                status_container,
                label_text,
                key,
                start_col
            )

    def create_status_pair(self, parent, label_text, key, start_col):
        """Create a status indicator pair (label + status)"""
        # Create label
        label = ctk.CTkLabel(
            parent,
            text=label_text,
            font=AppConfig.TEXT_FONT,
            text_color=AppConfig.TEXT_COLOR,
        )
        label.grid(
            row=0, 
            column=start_col, 
            sticky="w", 
            padx=(12 if start_col == 0 else 20, 10), 
            pady=12
        )
        
        # Create status
        status = ctk.CTkLabel(
            parent,
            text="NONE",
            font=AppConfig.TEXT_FONT,
            text_color="red",
        )
        status.grid(
            row=0, 
            column=start_col + 1, 
            sticky="w", 
            padx=10, 
            pady=12
        )
        
        # Store reference
        self.status_labels[key] = status

    def update_status(self, fuelgause: bool, imu1: bool, imu2: bool):
        """Update all status indicators at once
        
        Args:
            fuelgause: Status of fuelgause
            imu1: Status of IMU1
            imu2: Status of IMU2
        """
        status_values = {
            "fuelgause": fuelgause,
            "imu1": imu1,
            "imu2": imu2
        }
        
        for key, is_running in status_values.items():
            self.status_labels[key].configure(
                text="RUNNING" if is_running else "NONE",
                text_color=AppConfig.BUTTON_COLOR if is_running else "red"
            )
sensor
import customtkinter as ctk
from src.config.app_config import AppConfig
from src.views.coordinate_entry import CoordinateEntry
from src.views.button_component import ButtonComponent

class SensorView(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(
            parent,
            fg_color=AppConfig.PANEL_COLOR,
            border_color=AppConfig.BORDER_COLOR,
            border_width=AppConfig.BORDER_WIDTH,
            corner_radius=AppConfig.CORNER_RADIUS
        )
        self._setup_layout()
        self._create_header()
        self._create_main_content()

    def _setup_layout(self):
        """Configure initial grid layout"""
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)

    def _create_header(self):
        """Create header label"""
        header_label = ctk.CTkLabel(
            self,
            text="SENSOR",
            font=AppConfig.HEADER_FONT,
            text_color=AppConfig.TEXT_COLOR
        )
        header_label.grid(row=0, column=0, sticky="nw", padx=12, pady=(12, 0))

    def _create_main_content(self):
        """Create main content including sensors and button"""
        # Create main container
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.grid(row=1, column=0, sticky="nsew", padx=12, pady=12)
        main_frame.grid_columnconfigure((1, 2, 3, 4, 5), weight=0)

        # Create flex sensor section
        flex_label = ctk.CTkLabel(
            main_frame,
            text="Flex Sensor (kOhm):",
            font=AppConfig.LABEL_FONT,
            text_color=AppConfig.TEXT_COLOR
        )
        flex_label.grid(row=0, column=0, sticky="w")

        # Create flex sensor entries
        self.flex_entries = {}
        for i in range(5):
            sensor_num = i + 1
            entry_label = f"{sensor_num}"
            self.flex_entries[sensor_num] = CoordinateEntry(main_frame, entry_label, entry_width=120)
            self.flex_entries[sensor_num].grid(row=0, column=i+1, sticky="ew", padx=5)

        # Create force sensor section
        force_label = ctk.CTkLabel(
            main_frame,
            text="Force Sensor (kOhm):",
            font=AppConfig.LABEL_FONT,
            text_color=AppConfig.TEXT_COLOR
        )
        force_label.grid(row=1, column=0, sticky="w")

        # Create force sensor entry
        self.force_entry = CoordinateEntry(main_frame, "", entry_width=120)
        self.force_entry.grid(row=1, column=1, columnspan=2, sticky="ew", pady=(20, 20))

        # Create button container and configure button
        button_container = ctk.CTkFrame(
            self,
            fg_color="transparent",
            width=0,
            height=28,
        )
        button_container.grid(row=2, column=0, sticky="es", padx=10, pady=(0, 20))
        button_container.grid_columnconfigure((0, 1), weight=0)

        self.button_config = ButtonComponent(button_container, "Configure")
        self.button_config.grid(row=2, column=0, sticky="es", pady=(0, 0), padx=(0, 20))

    def update_flex_sensor(self, sensor_id: int, value: float):
        """Update flex sensor value"""
        if sensor_id in self.flex_entries:
            self.flex_entries[sensor_id].set_value(value)

    def update_force_sensor(self, value: float):
        """Update force sensor value"""
        self.force_entry.set_value(value)
button
import customtkinter as ctk
from src.config.app_config import AppConfig

class ButtonComponent(ctk.CTkButton):
    def __init__(self, parent, button_text: str, **kwargs):
        # Set default values
        default_settings = {
            "text": button_text,
            "font": AppConfig.BUTTON_FONT,
            "text_color": AppConfig.TEXT_COLOR,
            "fg_color": AppConfig.BUTTON_COLOR,
            "width": AppConfig.BUTTON_WIDTH,
            "height": AppConfig.BUTTON_HEIGHT,
            "corner_radius": AppConfig.BUTTON_CORNER_RADIUS,
        }
        
        # Update defaults with any provided kwargs
        default_settings.update(kwargs)
        
        # Initialize with combined settings
        super().__init__(parent, **default_settings)
dialog connection
import customtkinter as ctk
from src.config.app_config import AppConfig
from src.views.button_component import ButtonComponent
import time

class DeviceListHeader(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent, fg_color="transparent")
        self._setup_layout()
        self._create_headers()

    def _setup_layout(self):
        self.pack(fill="x")
        self.grid_columnconfigure(0, minsize=140)  # Name
        self.grid_columnconfigure(1, minsize=204)  # Address
        self.grid_columnconfigure(2, minsize=172)  # RSSI

    def _create_headers(self):
        headers = ["NAME", "ADDRESS", "RSSI"]
        for i, text in enumerate(headers):
            label = ctk.CTkLabel(
                self,
                text=text,
                font=("Inter Bold", 12),
                text_color="white"
            )
            label.grid(row=0, column=i, sticky="w", padx=15, pady=10)

class ScrollableDeviceFrame(ctk.CTkScrollableFrame):
    def __init__(self, master, command=None, **kwargs):
        super().__init__(master, **kwargs)
        self.grid_columnconfigure(0, weight=1)
        self.command = command
        self.selected_row = None
        self.rows = []

    def add_device(self, name, address, rssi):
        row = len(self.rows)
        frame = self._create_device_row(row, name, address, rssi)
        self.rows.append(frame)
        return frame

    def _create_device_row(self, row, name, address, rssi):
        frame = ctk.CTkFrame(self, fg_color="transparent")
        frame.grid(row=row, column=0, sticky="ew", padx=5, pady=2)
        frame.grid_columnconfigure(0, minsize=140)
        frame.grid_columnconfigure(1, minsize=204)
        frame.grid_columnconfigure(2, minsize=172)

        device_info = {"name": name, "address": address, "rssi": rssi}
        
        for col, text in enumerate([name, address, str(rssi)]):
            label = ctk.CTkLabel(
                frame,
                text=text,
                font=("Inter Medium", 12),
                text_color="white"
            )
            label.grid(row=0, column=col, sticky="w", padx=15, pady=5)

        self._bind_row_events(frame, row, device_info)
        return frame

    def _bind_row_events(self, frame, row, device_info):
        frame.bind("<Button-1>", lambda e: self._on_select(row, device_info))
        for widget in frame.winfo_children():
            widget.bind("<Button-1>", lambda e: self._on_select(row, device_info))

    def _on_select(self, row, device_info):
        if self.selected_row is not None:
            self.rows[self.selected_row].configure(fg_color="transparent")
        
        self.selected_row = row
        self.rows[row].configure(fg_color=("#3D3F41", "#3D3F41"))
        
        if self.command:
            self.command(device_info)

class ConnectionDialog(ctk.CTkToplevel):
    def __init__(self, parent, callback=None):
        super().__init__(parent)
        self.callback = callback
        self.selected_device = None
        self._setup_window(parent)
        self._create_main_layout()
        self._add_sample_devices()

    def _setup_window(self, parent):
        self.overrideredirect(True)
        self.configure(fg_color=("#2B2D30", "#2B2D30"))
        self.geometry("569x443")
        self._center_window(parent)
        self._make_modal(parent)

    def _center_window(self, parent):
        x = parent.winfo_rootx() + (parent.winfo_width() - 569) // 2
        y = parent.winfo_rooty() + (parent.winfo_height() - 443) // 2
        self.geometry(f"+{x}+{y}")

    def _make_modal(self, parent):
        self.transient(parent)
        self.grab_set()

    def _create_main_layout(self):
        main_frame = self._create_border_frame(self)
        content = self._create_content_frame(main_frame)
        self._create_title(content)
        self._create_device_list(content)
        self._create_bottom_section(content)

    def _create_border_frame(self, parent):
        frame = ctk.CTkFrame(
            parent,
            fg_color=("#2B2D30", "#2B2D30"),
            border_color=("#777777", "#777777"),
            border_width=1,
            corner_radius=8
        )
        frame.pack(fill="both", expand=True, padx=2, pady=2)
        return frame

    def _create_content_frame(self, parent):
        content = ctk.CTkFrame(parent, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=20, pady=20)
        return content

    def _create_title(self, parent):
        # Create container for title and scan button
        title_frame = ctk.CTkFrame(parent, fg_color="transparent")
        title_frame.pack(fill="x", pady=(0, 15))
        title_frame.grid_columnconfigure(1, weight=1)  # Make space between title and button

        # Create header
        header = ctk.CTkLabel(
            title_frame,
            text="Connection",
            font=("Inter Bold", 16),
            text_color="white"
        )
        header.grid(row=0, column=0, sticky="w")

        # Create scan button
        self.scan_btn = ButtonComponent(
            title_frame,
            "Scan Again",
            command=self._on_scan_again,
            width=100,
            height=32
        )
        self.scan_btn.grid(row=0, column=2, sticky="e")
        
    def _on_scan_again(self):
        """Handle scan again button click"""
        # Clear existing devices
        for row in self.device_list.rows:
            row.destroy()
        self.device_list.rows.clear()
        self.device_list.selected_row = None
        
        # Reset info and connect button
        self.info_label.configure(text="")
        self.connect_btn.configure(state="disabled")
        self.selected_device = None
        time.sleep(1)  # Simulate a delay for scanning
        # Add sample devices again
        self._add_sample_devices()

    def _create_device_list(self, parent):
        container = ctk.CTkFrame(parent, fg_color="transparent", height=294)
        container.pack(fill="x", pady=(0, 15))
        container.pack_propagate(False)

        list_frame = self._create_border_frame(container)
        content = ctk.CTkFrame(list_frame, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=5, pady=5)

        DeviceListHeader(content)
        
        self.device_list = ScrollableDeviceFrame(
            content,
            command=self._show_device_info,
            fg_color="transparent",
            corner_radius=0,
            width=516,
            height=215
        )
        self.device_list.pack(fill="both", expand=True)

    def _create_bottom_section(self, parent):
        frame = ctk.CTkFrame(parent, fg_color="transparent")
        frame.pack(fill="x")
        frame.grid_columnconfigure(0, weight=1)

        self._create_info_section(frame)
        self._create_button_section(frame)

    def _create_info_section(self, parent):
        self.info_frame = ctk.CTkFrame(parent, fg_color="transparent")
        self.info_frame.grid(row=0, column=0, sticky="w")
        
        self.info_label = ctk.CTkLabel(
            self.info_frame,
            text="",
            font=("Inter Medium", 12),
            text_color="white"
        )
        self.info_label.pack(anchor="w")

    def _create_button_section(self, parent):
        button_frame = ctk.CTkFrame(parent, fg_color="transparent")
        button_frame.grid(row=0, column=1, sticky="e")

        self._create_cancel_button(button_frame)
        self._create_connect_button(button_frame)

    def _create_cancel_button(self, parent):
        self.cancel_btn = ButtonComponent(
            parent,
            "Cancel", 
            command=self.destroy,
            fg_color="transparent",  # This will override the default
            hover_color="gray20"
        )
        self.cancel_btn.pack(side="left", padx=(0, 20))

    def _create_connect_button(self, parent):
        self.connect_btn = ButtonComponent(
            parent,
            "Connect",
            command=self._on_connect,
            state="disabled",
            fg_color="#0078D4",
            hover_color="#006CBE"
        )
        self.connect_btn.pack(side="left")

    def _show_device_info(self, device_info):
        """Update the info label with selected device info and store selected device"""
        info_text = f"{device_info['name']}, {device_info['address']}, {device_info['rssi']}"
        self.info_label.configure(text=info_text)
        self.connect_btn.configure(state="normal")
        self.selected_device = device_info

    def _on_connect(self):
        """Handle the connection to the selected device"""
        if self.selected_device:
            # Create device info based on selected device
            device_info = {
                "name": self.selected_device["name"],
                "status": "Connected",
                "battery": f"{50 + hash(self.selected_device['name']) % 50}%",  # Random between 50-99%
                "charging": "Yes" if hash(self.selected_device['name']) % 2 else "No",
                "firmware": f"v{1 + hash(self.selected_device['name']) % 3}.{hash(self.selected_device['address']) % 9}.{hash(self.selected_device['rssi']) % 9}",
                "model": self._get_model_info(self.selected_device["name"]),
                "manufacturer": self._get_manufacturer(self.selected_device["name"]),
                "hardware": f"Rev {1 + hash(self.selected_device['address']) % 3}.{hash(self.selected_device['name']) % 9}"
            }
            if self.callback:
                self.callback(device_info)
        self.destroy()

    def _get_model_info(self, device_name):
        """Get model info based on device name"""
        if "ESP32" in device_name:
            if "DevKit" in device_name:
                return "ESP32-WROOM-32E"
            elif "CAM" in device_name:
                return "ESP32-CAM-MB"
            else:
                return "ESP32-WROVER-B"
        elif "RPI" in device_name:
            return "RP2040"
        elif "Arduino" in device_name:
            return "ATmega328P"
        elif "M5Stack" in device_name:
            return "ESP32-D0WDQ6"
        return "Unknown"

    def _get_manufacturer(self, device_name):
        """Get manufacturer based on device name"""
        if "ESP32" in device_name:
            return "Espressif"
        elif "RPI" in device_name:
            return "Raspberry Pi"
        elif "Arduino" in device_name:
            return "Arduino LLC"
        elif "M5Stack" in device_name:
            return "M5Stack"
        return "Unknown"

    def _add_sample_devices(self):
        """Add sample devices to the list"""
        devices = [
            ("ESP32-DevKit-1", "A4:CF:12:34:56:78", -65),
            ("ESP32-CAM-1", "E4:A5:F3:11:22:33", -68),
            ("RPI-Pico-W1", "C4:23:FF:AA:BB:CC", -58),
            ("Arduino-Nano-1", "D4:51:A8:B7:C6:D5", -75),
            ("M5Stack-Core2", "F4:BB:AA:44:55:66", -62),
            ("ESP32-Sensor-1", "B4:E6:2D:1A:2B:3C", -72),
        ]

        for name, address, rssi in devices:
            self.device_list.add_device(name, address, rssi)

entry
import customtkinter as ctk
from src.config.app_config import AppConfig

class CoordinateEntry(ctk.CTkFrame):
    def __init__(self, parent, label_text, entry_width=120):
        super().__init__(
            parent,
            fg_color="transparent",
            # width=300  # Set fixed width for the frame
        )

        # Create label
        self.label = ctk.CTkLabel(
            self,
            text=label_text,
            font=AppConfig.LABEL_FONT,
            text_color=AppConfig.TEXT_COLOR,
            fg_color="transparent"
        )
        self.label.grid(row=0, column=0, sticky="nw", padx=(0, 10))

        # Create entry
        self.entry = ctk.CTkEntry(
            self,
            width=entry_width,  # Fixed width for the entry
            height=25,
            font=AppConfig.TEXT_FONT,
            text_color=AppConfig.TEXT_COLOR,
            fg_color=AppConfig.FRAME_BG,
        )
        self.entry.grid(row=0, column=1, sticky="ew")
        self.entry.insert(0, "0")
        self.entry.configure(state="readonly")

    def set_value(self, value: float):
        """Update the coordinate value"""
        self.entry.configure(state="normal")
        self.entry.delete(0, "end")
        self.entry.insert(0, f"{value:.2f}")
        self.entry.configure(state="readonly")

    def get_value(self) -> float:
        """Get the current coordinate value"""
        try:
            return float(self.entry.get())
        except ValueError:
            return 0.0
