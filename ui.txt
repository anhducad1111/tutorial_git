import customtkinter as ctk
from src.config.app_config import AppConfig
from src.views.button_component import ButtonComponent
import time

class DeviceListHeader(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent, fg_color="transparent")
        self._setup_layout()
        self._create_headers()

    def _setup_layout(self):
        self.pack(fill="x")
        self.grid_columnconfigure(0, minsize=140)  # Name
        self.grid_columnconfigure(1, minsize=204)  # Address
        self.grid_columnconfigure(2, minsize=172)  # RSSI

    def _create_headers(self):
        headers = ["NAME", "ADDRESS", "RSSI"]
        for i, text in enumerate(headers):
            label = ctk.CTkLabel(
                self,
                text=text,
                font=("Inter Bold", 12),
                text_color="white"
            )
            label.grid(row=0, column=i, sticky="w", padx=15, pady=10)

class ScrollableDeviceFrame(ctk.CTkScrollableFrame):
    def __init__(self, master, command=None, **kwargs):
        super().__init__(master, **kwargs)
        self.grid_columnconfigure(0, weight=1)
        self.command = command
        self.selected_row = None
        self.rows = []

    def add_device(self, name, address, rssi):
        row = len(self.rows)
        frame = self._create_device_row(row, name, address, rssi)
        self.rows.append(frame)
        return frame

    def _create_device_row(self, row, name, address, rssi):
        frame = ctk.CTkFrame(self, fg_color="transparent")
        frame.grid(row=row, column=0, sticky="ew", padx=5, pady=2)
        frame.grid_columnconfigure(0, minsize=140)
        frame.grid_columnconfigure(1, minsize=204)
        frame.grid_columnconfigure(2, minsize=172)

        device_info = {"name": name, "address": address, "rssi": rssi}
        
        for col, text in enumerate([name, address, str(rssi)]):
            label = ctk.CTkLabel(
                frame,
                text=text,
                font=("Inter Medium", 12),
                text_color="white"
            )
            label.grid(row=0, column=col, sticky="w", padx=15, pady=5)

        self._bind_row_events(frame, row, device_info)
        return frame

    def _bind_row_events(self, frame, row, device_info):
        frame.bind("<Button-1>", lambda e: self._on_select(row, device_info))
        for widget in frame.winfo_children():
            widget.bind("<Button-1>", lambda e: self._on_select(row, device_info))

    def _on_select(self, row, device_info):
        if self.selected_row is not None:
            self.rows[self.selected_row].configure(fg_color="transparent")
        
        self.selected_row = row
        self.rows[row].configure(fg_color=("#3D3F41", "#3D3F41"))
        
        if self.command:
            self.command(device_info)

class ConnectionDialog(ctk.CTkToplevel):
    def __init__(self, parent, callback=None):
        super().__init__(parent)
        self.callback = callback
        self.selected_device = None
        self._setup_window(parent)
        self._create_main_layout()
        self._add_sample_devices()

    def _setup_window(self, parent):
        self.overrideredirect(True)
        self.configure(fg_color=("#2B2D30", "#2B2D30"))
        self.geometry("569x443")
        self._center_window(parent)
        self._make_modal(parent)

    def _center_window(self, parent):
        x = parent.winfo_rootx() + (parent.winfo_width() - 569) // 2
        y = parent.winfo_rooty() + (parent.winfo_height() - 443) // 2
        self.geometry(f"+{x}+{y}")

    def _make_modal(self, parent):
        self.transient(parent)
        self.grab_set()

    def _create_main_layout(self):
        main_frame = self._create_border_frame(self)
        content = self._create_content_frame(main_frame)
        self._create_title(content)
        self._create_device_list(content)
        self._create_bottom_section(content)

    def _create_border_frame(self, parent):
        frame = ctk.CTkFrame(
            parent,
            fg_color=("#2B2D30", "#2B2D30"),
            border_color=("#777777", "#777777"),
            border_width=1,
            corner_radius=8
        )
        frame.pack(fill="both", expand=True, padx=2, pady=2)
        return frame

    def _create_content_frame(self, parent):
        content = ctk.CTkFrame(parent, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=20, pady=20)
        return content

    def _create_title(self, parent):
        # Create container for title and scan button
        title_frame = ctk.CTkFrame(parent, fg_color="transparent")
        title_frame.pack(fill="x", pady=(0, 15))
        title_frame.grid_columnconfigure(1, weight=1)  # Make space between title and button

        # Create header
        header = ctk.CTkLabel(
            title_frame,
            text="Connection",
            font=("Inter Bold", 16),
            text_color="white"
        )
        header.grid(row=0, column=0, sticky="w")

        # Create scan button
        self.scan_btn = ButtonComponent(
            title_frame,
            "Scan Again",
            command=self._on_scan_again,
            width=100,
            height=32
        )
        self.scan_btn.grid(row=0, column=2, sticky="e")
        
    def _on_scan_again(self):
        """Handle scan again button click"""
        # Clear existing devices
        for row in self.device_list.rows:
            row.destroy()
        self.device_list.rows.clear()
        self.device_list.selected_row = None
        
        # Reset info and connect button
        self.info_label.configure(text="")
        self.connect_btn.configure(state="disabled")
        self.selected_device = None
        time.sleep(1)  # Simulate a delay for scanning
        # Add sample devices again
        self._add_sample_devices()

    def _create_device_list(self, parent):
        container = ctk.CTkFrame(parent, fg_color="transparent", height=294)
        container.pack(fill="x", pady=(0, 15))
        container.pack_propagate(False)

        list_frame = self._create_border_frame(container)
        content = ctk.CTkFrame(list_frame, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=5, pady=5)

        DeviceListHeader(content)
        
        self.device_list = ScrollableDeviceFrame(
            content,
            command=self._show_device_info,
            fg_color="transparent",
            corner_radius=0,
            width=516,
            height=215
        )
        self.device_list.pack(fill="both", expand=True)

    def _create_bottom_section(self, parent):
        frame = ctk.CTkFrame(parent, fg_color="transparent")
        frame.pack(fill="x")
        frame.grid_columnconfigure(0, weight=1)

        self._create_info_section(frame)
        self._create_button_section(frame)

    def _create_info_section(self, parent):
        self.info_frame = ctk.CTkFrame(parent, fg_color="transparent")
        self.info_frame.grid(row=0, column=0, sticky="w")
        
        self.info_label = ctk.CTkLabel(
            self.info_frame,
            text="",
            font=("Inter Medium", 12),
            text_color="white"
        )
        self.info_label.pack(anchor="w")

    def _create_button_section(self, parent):
        button_frame = ctk.CTkFrame(parent, fg_color="transparent")
        button_frame.grid(row=0, column=1, sticky="e")

        self._create_cancel_button(button_frame)
        self._create_connect_button(button_frame)

    def _create_cancel_button(self, parent):
        self.cancel_btn = ButtonComponent(
            parent,
            "Cancel", 
            command=self.destroy,
            fg_color="transparent",  # This will override the default
            hover_color="gray20"
        )
        self.cancel_btn.pack(side="left", padx=(0, 20))

    def _create_connect_button(self, parent):
        self.connect_btn = ButtonComponent(
            parent,
            "Connect",
            command=self._on_connect,
            state="disabled",
            fg_color="#0078D4",
            hover_color="#006CBE"
        )
        self.connect_btn.pack(side="left")

    def _show_device_info(self, device_info):
        """Update the info label with selected device info and store selected device"""
        info_text = f"{device_info['name']}, {device_info['address']}, {device_info['rssi']}"
        self.info_label.configure(text=info_text)
        self.connect_btn.configure(state="normal")
        self.selected_device = device_info

    def _on_connect(self):
        """Handle the connection to the selected device"""
        if self.selected_device:
            # Create device info based on selected device
            device_info = {
                "name": self.selected_device["name"],
                "status": "Connected",
                "battery": f"{50 + hash(self.selected_device['name']) % 50}%",  # Random between 50-99%
                "charging": "Yes" if hash(self.selected_device['name']) % 2 else "No",
                "firmware": f"v{1 + hash(self.selected_device['name']) % 3}.{hash(self.selected_device['address']) % 9}.{hash(self.selected_device['rssi']) % 9}",
                "model": self._get_model_info(self.selected_device["name"]),
                "manufacturer": self._get_manufacturer(self.selected_device["name"]),
                "hardware": f"Rev {1 + hash(self.selected_device['address']) % 3}.{hash(self.selected_device['name']) % 9}"
            }
            if self.callback:
                self.callback(device_info)
        self.destroy()

    def _get_model_info(self, device_name):
        """Get model info based on device name"""
        if "ESP32" in device_name:
            if "DevKit" in device_name:
                return "ESP32-WROOM-32E"
            elif "CAM" in device_name:
                return "ESP32-CAM-MB"
            else:
                return "ESP32-WROVER-B"
        elif "RPI" in device_name:
            return "RP2040"
        elif "Arduino" in device_name:
            return "ATmega328P"
        elif "M5Stack" in device_name:
            return "ESP32-D0WDQ6"
        return "Unknown"

    def _get_manufacturer(self, device_name):
        """Get manufacturer based on device name"""
        if "ESP32" in device_name:
            return "Espressif"
        elif "RPI" in device_name:
            return "Raspberry Pi"
        elif "Arduino" in device_name:
            return "Arduino LLC"
        elif "M5Stack" in device_name:
            return "M5Stack"
        return "Unknown"

    def _add_sample_devices(self):
        """Add sample devices to the list"""
        devices = [
            ("ESP32-DevKit-1", "A4:CF:12:34:56:78", -65),
            ("ESP32-CAM-1", "E4:A5:F3:11:22:33", -68),
            ("RPI-Pico-W1", "C4:23:FF:AA:BB:CC", -58),
            ("Arduino-Nano-1", "D4:51:A8:B7:C6:D5", -75),
            ("M5Stack-Core2", "F4:BB:AA:44:55:66", -62),
            ("ESP32-Sensor-1", "B4:E6:2D:1A:2B:3C", -72),
        ]

        for name, address, rssi in devices:
            self.device_list.add_device(name, address, rssi)

 app_config:
 class AppConfig:
    """Configuration settings for the Device Monitor application"""

    # Application settings
    APP_VERSION = "1.0.0"
    
    # Display scaling
    DISPLAY_SCALING = 0.9
    WINDOW_SCALING = 0.9

    # Window settings
    WINDOW_TITLE = "Device Monitor"
    WINDOW_WIDTH = 1700
    WINDOW_HEIGHT = 900
    WINDOW_MAXIMIZED = True
    WINDOW_PADDING = 24

    # Info Panel dimensions
    INFO_PANEL_WIDTH = 1636
    INFO_PANEL_HEIGHT = 116

    # Theme colors
    APPEARANCE_MODE = "dark"
    BACKGROUND_COLOR = "#1F1F1F"
    PANEL_COLOR = "#2B2D30"
    BORDER_COLOR = "#373737"
    BUTTON_COLOR = "#0078D4"
    BUTTON_HOVER_COLOR = "#0063AD"  
    DISCONNECT_COLOR = "darkred"
    DISCONNECT_HOVER_COLOR = "#8B0000"
    TEXT_COLOR = "white"
    LABEL_COLOR = "#DEDEDE"
    TEXTBOX_COLOR = "#373737"
    FRAME_BG = "#5D5D5D"

    # Typography
    FONT_FAMILY = "Inter"
    FONT_SIZE_HEADER = 16
    FONT_SIZE_NORMAL = 12
    
    FONT_WEIGHT_NORMAL = "normal"
    FONT_WEIGHT_BOLD = "bold"
    
    HEADER_FONT = (FONT_FAMILY + " Bold", FONT_SIZE_HEADER)
    LABEL_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    VALUE_FONT = (FONT_FAMILY + " Bold", FONT_SIZE_NORMAL)
    TEXT_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    BUTTON_FONT = (FONT_FAMILY, FONT_SIZE_NORMAL)
    
    # Component styling
    BORDER_WIDTH = 1
    CORNER_RADIUS = 8
    BUTTON_CORNER_RADIUS = 8  
    
    # Button dimensions
    BUTTON_WIDTH = 112
    BUTTON_HEIGHT = 38

    # Footer settings
    FOOTER_HEIGHT = 50
    FOOTER_COLOR = "#181818"
    FOOTER_PADDING = 20
button_component:
import customtkinter as ctk
from src.config.app_config import AppConfig

class ButtonComponent(ctk.CTkButton):
    def __init__(self, parent, button_text: str, **kwargs):
        # Set default values
        default_settings = {
            "text": button_text,
            "font": AppConfig.BUTTON_FONT,
            "text_color": AppConfig.TEXT_COLOR,
            "fg_color": AppConfig.BUTTON_COLOR,
            "width": AppConfig.BUTTON_WIDTH,
            "height": AppConfig.BUTTON_HEIGHT,
            "corner_radius": AppConfig.BUTTON_CORNER_RADIUS,
        }
        
        # Update defaults with any provided kwargs
        default_settings.update(kwargs)
        
        # Initialize with combined settings
        super().__init__(parent, **default_settings)
