import customtkinter as ctk
from src.config.app_config import AppConfig
from src.views.coordinate_entry import CoordinateEntry
from src.views.button_component import ButtonComponent


class BaseIMUView(ctk.CTkFrame):
    def __init__(self, parent, title: str):
        super().__init__(
            parent,
            fg_color=AppConfig.PANEL_COLOR,
            border_color=AppConfig.BORDER_COLOR,
            border_width=AppConfig.BORDER_WIDTH,
            corner_radius=AppConfig.CORNER_RADIUS,
        )

        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=0)

        # Create header
        header_label = ctk.CTkLabel(
            self,
            text=title,
            font=AppConfig.HEADER_FONT,
            text_color=AppConfig.TEXT_COLOR,
        )
        header_label.grid(row=0, column=0, sticky="nw", padx=12, pady=(12, 0))

        # Create main data frame
        self.data_frame = ctk.CTkFrame(self, width=0)
        self.data_frame.grid(row=1, column=0, sticky="nsew",
                             padx=(12, 0), pady=(0, 12))
        self.data_frame.grid_columnconfigure(0, weight=0)
        self.data_frame.grid_rowconfigure((0, 1, 2, 3), weight=1) 

        # Create sensor data frames
        self.accel_entries = self._create_sensor_frame(
            0, "Accel (mg)", ["X", "Y", "Z"], 120)
        self.gyro_entries = self._create_sensor_frame(
            1, "Gyro (dps)", ["X", "Y", "Z"], 120)
        self.magn_entries = self._create_sensor_frame(
            2, "Magn (uT)", ["X", "Y", "Z"], 120)
        self.euler_entries = self._create_sensor_frame(
            3, "Euler (deg)", ["Pitch", "Roll", "Yaw"], 100)
        
        # Button container
        button_container = ctk.CTkFrame(
            self,
            fg_color="transparent",
            width=0,
            height=28,
        )
        button_container.grid(row=2, column=0, sticky="es", padx=10, pady=(0, 20))
        button_container.grid_columnconfigure((0, 1), weight=0)  # Ensure buttons stay at their minimal width

        # Create Configure button
        self.button_config = ButtonComponent(button_container, "Configure")
        self.button_config.grid(row=0, column=0, sticky="es", padx=(0, 10), pady=0)

        # Create Calibrate button
        self.button_calibrate = ButtonComponent(button_container, "Calibrate")
        self.button_calibrate.grid(row=0, column=1, sticky="es", padx=(0, 10), pady=0)
        


    def _create_sensor_frame(self, row: int, label_text: str, axis_labels: list, entry_width: int = 80) -> dict:
        """Create a frame for sensor data with three coordinate entries.

        Args:
            row: Row position in the main data frame
            label_text: Label for the sensor type
            axis_labels: List of labels for each axis (e.g., ["X", "Y", "Z"])
            entry_width: Width of the entry fields

        Returns:
            Dictionary containing the coordinate entry widgets
        """
        frame = ctk.CTkFrame(
            self.data_frame,
            width=0,
            fg_color="transparent",
        )
        frame.grid(row=row, column=0, sticky="nsew", padx=(0, 0), pady=(0, 12))

        # Add sensor type label
        label = ctk.CTkLabel(
            frame,
            text=label_text,
            font=AppConfig.LABEL_FONT,
            text_color=AppConfig.TEXT_COLOR,
        )
        label.grid(row=0, column=0, sticky="nw", padx=10)

        # Create entries for each axis
        entries = {}
        for i, axis in enumerate(axis_labels):
            entry = CoordinateEntry(frame, axis, entry_width)
            entry.grid(row=0, column=i+1, padx=(0, 10))
            entries[axis.lower()] = entry

        return entries

    def update_accel(self, x: float, y: float, z: float):
        """Update accelerometer values"""
        self.accel_entries['x'].set_value(x)
        self.accel_entries['y'].set_value(y)
        self.accel_entries['z'].set_value(z)

    def update_gyro(self, x: float, y: float, z: float):
        """Update gyroscope values"""
        self.gyro_entries['x'].set_value(x)
        self.gyro_entries['y'].set_value(y)
        self.gyro_entries['z'].set_value(z)

    def update_magn(self, x: float, y: float, z: float):
        """Update magnetometer values"""
        self.magn_entries['x'].set_value(x)
        self.magn_entries['y'].set_value(y)
        self.magn_entries['z'].set_value(z)

    def update_euler(self, pitch: float, roll: float, yaw: float):
        """Update euler angles"""
        self.euler_entries['pitch'].set_value(pitch)
        self.euler_entries['roll'].set_value(roll)
        self.euler_entries['yaw'].set_value(yaw)



entry.py 
import customtkinter as ctk
from src.config.app_config import AppConfig

class CoordinateEntry(ctk.CTkFrame):
    def __init__(self, parent, label_text, entry_width=120):
        super().__init__(
            parent,
            fg_color="transparent",
            # width=300  # Set fixed width for the frame
        )

        # Create label
        self.label = ctk.CTkLabel(
            self,
            text=label_text,
            font=AppConfig.LABEL_FONT,
            text_color=AppConfig.TEXT_COLOR,
            fg_color="transparent"
        )
        self.label.grid(row=0, column=0, sticky="nw", padx=(0, 10))

        # Create entry
        self.entry = ctk.CTkEntry(
            self,
            width=entry_width,  # Fixed width for the entry
            height=25,
            font=AppConfig.TEXT_FONT,
            text_color=AppConfig.TEXT_COLOR,
            fg_color=AppConfig.FRAME_BG,
        )
        self.entry.grid(row=0, column=1, sticky="ew")
        self.entry.insert(0, "0")
        self.entry.configure(state="readonly")

    def set_value(self, value: float):
        """Update the coordinate value"""
        self.entry.configure(state="normal")
        self.entry.delete(0, "end")
        self.entry.insert(0, f"{value:.2f}")
        self.entry.configure(state="readonly")

    def get_value(self) -> float:
        """Get the current coordinate value"""
        try:
            return float(self.entry.get())
        except ValueError:
            return 0.0
main.py 
# Create frame for IMU panels
        imu_frame = ctk.CTkFrame(right_container, fg_color="transparent")
        imu_frame.grid(row=1, column=0, sticky="nsew", padx=(10,0), pady=10)
        imu_frame.grid_columnconfigure(0, weight=1)
        imu_frame.grid_columnconfigure(1, weight=1)
        
        imu_frame.grid_rowconfigure(0, weight=1)
        imu_frame.grid_rowconfigure(1, weight=1)

        # IMU panels (equal width)
        self.imu1_view = IMU1View(imu_frame)
        self.imu1_view.grid(row=0, column=0, 
                            sticky="nsew", padx=(0, 10))

        self.imu2_view = IMU2View(imu_frame)
        self.imu2_view.grid(row=0, column=1, 
                            sticky="nsew", padx=(10, 0))